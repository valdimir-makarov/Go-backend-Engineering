package graph

// // This file will be automatically regenerated based on the schema, any resolver implementations
// // will be copied through when generating and any unknown code will be moved to the end.
// // Code generated by github.com/99designs/gqlgen version v0.17.66

// import (
// 	"context"
// 	"fmt"

// 	"github.com/valdimir-makarov/Go-backend-Engineering/Complete-Golang-Micro-Service-Project/graphql/graph/model"
// )

// // Orders is the resolver for the orders field.
// func (r *accountResolver) Orders(ctx context.Context, obj *model.Account) ([]*model.Order, error) {
// 	panic(fmt.Errorf("not implemented: Orders - orders"))
// }

// // CreateAccount is the resolver for the createAccount field.
// func (r *mutationResolver) CreateAccount(ctx context.Context, account model.AccountInput) (*model.Account, error) {
// 	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
// }

// // CreateProduct is the resolver for the createProduct field.
// func (r *mutationResolver) CreateProduct(ctx context.Context, product model.ProductInput) (*model.Product, error) {
// 	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
// }

// // CreateOrder is the resolver for the createOrder field.
// func (r *mutationResolver) CreateOrder(ctx context.Context, order model.OrderInput) (*model.Order, error) {
// 	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
// }

// // Accounts is the resolver for the accounts field.
// func (r *queryResolver) Accounts(ctx context.Context, pagination *model.PaginationInput, id *string) ([]*model.Account, error) {
// 	panic(fmt.Errorf("not implemented: Accounts - accounts"))
// }

// // Products is the resolver for the products field.
// func (r *queryResolver) Products(ctx context.Context, pagination *model.PaginationInput, query *string, id *string) ([]*model.Product, error) {
// 	panic(fmt.Errorf("not implemented: Products - products"))
// }

// // Account returns AccountResolver implementation.
// func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// // Mutation returns MutationResolver implementation.
// func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// // Query returns QueryResolver implementation.
// func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// type accountResolver struct{ *Resolver }
// type mutationResolver struct{ *Resolver }
// type queryResolver struct{ *Resolver }
