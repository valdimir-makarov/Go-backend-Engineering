# # version: '3.8'

# # services:
# #   zookeeper:
# #     image: bitnami/zookeeper:latest
# #     container_name: zookeeper
# #     ports:
# #       - "2181:2181"
# #     environment:
# #       - ALLOW_ANONYMOUS_LOGIN=yes

# #   kafka:
# #     image: bitnami/kafka:3.5.1
# #     container_name: kafka
# #     ports:
# #       - "9092:9092"
# #     environment:
# #       - KAFKA_BROKER_ID=1
# #       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
# #       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
# #       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
# #       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
# #       - ALLOW_PLAINTEXT_LISTENER=yes
# #     depends_on:
# #       - zookeeper

# #   postgres:
# #     image: postgres:17
# #     container_name: postgres
# #     restart: always
# #     environment:
# #       POSTGRES_USER: postgres
# #       POSTGRES_PASSWORD: postgres
# #       POSTGRES_DB: chat_db
# #     ports:
# #       - "5432:5432"

# #   chat-service:
# #     build:
# #       context: ./chat-service
# #     container_name: chat-service
# #     environment:
# #       - CHAT_SERVICE_PORT=3001
# #       - DB_HOST=postgres
# #       - DB_PORT=5432
# #       - DB_USER=postgres
# #       - DB_PASSWORD=postgres
# #       - DB_NAME=chat_db
# #       - KAFKA_BROKER=kafka:9092
# #     env_file:
# #       - .env
# #     ports:
# #       - "3001:3001"
# #     depends_on:
# #       - kafka
# #       - postgres

# # networks:
# #   default:
# #     name: root_default   # ðŸ‘ˆ add this so it creates a named default network
# version: '3.8'

# services:
#   zookeeper:
#     image: bitnami/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       - ALLOW_ANONYMOUS_LOGIN=yes
#     volumes:
#       - zookeeper-data:/bitnami/zookeeper  # Add this line

#   kafka:
#     image: bitnami/kafka:3.5.1
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       - KAFKA_BROKER_ID=1
#       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
#       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
#       - ALLOW_PLAINTEXT_LISTENER=yes
#     depends_on:
#       - zookeeper
#     volumes:
#       - kafka-data:/bitnami/kafka  # Add this line

#   postgres:
#     image: postgres:17
#     container_name: postgres
#     restart: always
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: chat_db
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data

#   chat-service:
#     build:
#       context: ./chat-service
#     container_name: chat-service
#     environment:
#       - CHAT_SERVICE_PORT=3001
#       - DB_HOST=postgres
#       - DB_PORT=5432
#       - DB_USER=postgres
#       - DB_PASSWORD=postgres
#       - DB_NAME=chat_db
#       - KAFKA_BROKER=kafka:9092
#     env_file:
#       - .env
#     ports:
#       - "3001:3001"
#     depends_on:
#       - kafka
#       - postgres

# networks:
#   default:
#     name: root_default

# volumes:
#   postgres-data:
#   zookeeper-data:  # Add this line
#   kafka-data:      # Add this line
# version: '3.8'

# services:
#   zookeeper:
#     image: bitnami/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       - ALLOW_ANONYMOUS_LOGIN=yes
#     volumes:
#       - zookeeper-data:/bitnami/zookeeper

#   kafka:
#     image: bitnami/kafka:3.5.1
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       - KAFKA_BROKER_ID=1
#       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
#       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
#       - ALLOW_PLAINTEXT_LISTENER=yes
#     depends_on:
#       - zookeeper
#     volumes:
#       - kafka-data:/bitnami/kafka

#   postgres:
#     image: postgres:17
#     container_name: postgres
#     restart: always
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: chat_db
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data

#   auth-service:
#     build: ../chat-service/Auth-Service
#     container_name: auth-service
#     ports:
#       - "2021:8080" # 8080 in container, 2021 outside
#     environment:
#       - PORT=8080
#       - DB_HOST=postgres
#       - DB_PORT=5432
#       - DB_USER=postgres
#       - DB_PASSWORD=postgres
#       - DB_NAME=auth_db
#       - KAFKA_BROKER=kafka:9092 
#     depends_on:
#       - postgres
#       - kafka

#   krakend:
#     image: devopsfaith/krakend
#     container_name: krakend
#     ports:
#       - "9001:9001"
#     volumes:
#       - ../chat-service/Auth-Service/krakend.json:/etc/krakend/krakend.json
#     command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
#     depends_on:
#       - auth-service

#   chat-service:
#     build:
#       context: ./chat-service
#     container_name: chat-service
#     environment:
#       - CHAT_SERVICE_PORT=3001
#       - DB_HOST=postgres
#       - DB_PORT=5432
#       - DB_USER=postgres
#       - DB_PASSWORD=postgres
#       - DB_NAME=chat_db
#       - KAFKA_BROKER=kafka:9092
#     env_file:
#       - .env
#     ports:
#       - "3001:3001"
#     depends_on:
#       - kafka
#       - postgres
#       - auth-service  # add dependency so JWKS works

# networks:
#   default:
#     name: root_default

# volumes:
#   postgres-data:
#   zookeeper-data:
#   kafka-data:
version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/bitnami/kafka

  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chat_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./chat-service/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  auth-service:
    build: ../chat-service/Auth-Service
    container_name: auth-service
    ports:
      - "2021:8080" # inside = 8080, outside = 2021
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=auth_db
      - KAFKA_BROKER=kafka:9092 
    depends_on:
      - postgres
      - kafka

  chat-service:
    build:
      context: ./chat-service
    container_name: chat-service
    environment:
      - CHAT_SERVICE_PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=chat_db
      - KAFKA_BROKER=kafka:9092
    env_file:
      - .env
    ports:
      - "3001:3001"
    depends_on:
      - kafka
      - postgres
      - auth-service

  krakend:
    image: devopsfaith/krakend
    container_name: krakend
    ports:
      - "9001:9001"
    volumes:
      - ../chat-service/Auth-Service/krakend.json:/etc/krakend/krakend.json
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    depends_on:
      - auth-service

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8088:9001"  # outside = 8088, inside = 9001
    environment:
      - GATEWAY_PORT=:9001
      - AUTH_SERVICE_URL=http://auth-service:8080
    depends_on:
      - auth-service
      - chat-service
    restart: always

networks:
  default:
    name: root_default

volumes:
  postgres-data:
  zookeeper-data:
  kafka-data:
